generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model listaespera {
  idLista         Int                     @id @default(autoincrement())
  idUsuario       Int
  idLivro         Int
  ordemFila       Int
  dataEntradaFila DateTime                @default(now()) @db.DateTime(0)
  statusFila      listaespera_statusFila? @default(Ativo)
  usuario         usuario                 @relation(fields: [idUsuario], references: [idUsuario], onUpdate: Restrict, map: "listaespera_ibfk_1")
  livro           livro                   @relation(fields: [idLivro], references: [idLivro], onUpdate: Restrict, map: "listaespera_ibfk_2")

  @@index([idLivro], map: "idLivro")
  @@index([idUsuario], map: "idUsuario")
}

model livro {
  idLivro       Int            @id @default(autoincrement())
  titulo        String         @db.VarChar(200)
  isbn          String         @unique(map: "isbn") @db.VarChar(20)
  autor         String         @db.VarChar(150)
  editora       String?        @db.VarChar(100)
  anoPublicacao Int?
  paginas       Int?
  status        livro_status?  @default(DISPONIVEL)
  listaespera   listaespera[]
  reservalivro  reservalivro[]
}

model reserva {
  idReserva       Int                    @id @default(autoincrement())
  idUsuario       Int
  dataSolicitacao DateTime               @default(now()) @db.DateTime(0)
  statusReserva   reserva_statusReserva? @default(Ativa)
  dataNotificacao DateTime?              @db.DateTime(0)
  prazoEmprestimo DateTime?              @db.DateTime(0)
  dataRetirada    DateTime?              @db.DateTime(0)
  dataDevolucao   DateTime?              @db.DateTime(0)
  usuario         usuario                @relation(fields: [idUsuario], references: [idUsuario], onUpdate: Restrict, map: "reserva_ibfk_1")
  reservalivro    reservalivro[]

  @@index([idUsuario], map: "idUsuario")
}

model reservalivro {
  idReserva Int
  idLivro   Int
  reserva   reserva @relation(fields: [idReserva], references: [idReserva], onUpdate: Restrict, map: "reservalivro_ibfk_1")
  livro     livro   @relation(fields: [idLivro], references: [idLivro], onUpdate: Restrict, map: "reservalivro_ibfk_2")

  @@id([idReserva, idLivro])
  @@index([idLivro], map: "idLivro")
}

model usuario {
  idUsuario   Int           @id @default(autoincrement())
  nomeUsuario String        @db.VarChar(100)
  email       String        @unique(map: "email") @db.VarChar(150)
  senha       String        @db.VarChar(255)
  listaespera listaespera[]
  reserva     reserva[]
}

enum reserva_statusReserva {
  Ativa
  Cancelada
  Expirada
}

enum listaespera_statusFila {
  Ativo
  Cancelado
  Atendido
}

enum livro_status {
  DISPONIVEL
  INDISPONIVEL
  RESERVADO
}
